#!/bin/bash

# !!!!!! Need to deal with whitespace on user input for names

####### TechTutors Diag Script ########
####### For internal use only! ########

### Update... ###

cd /usr/share/cleantech-scripts
git pull
rsync -avhP linux/faht-report-template.fodt /usr/share/faht/
rsync -vP /usr/share/cleantech-scripts/win/ /mnt/usbdata/cleantech-win/
rsync -vP /usr/share/cleantech-scripts/macos/ /mnt/usbdata/cleantech-macos/
cd /usr/share/cleantech-scripts/linux

### Dump current user to tmp var and re run as root  ###
whoami>/tmp/fahtdiaguser

FAHT_DIAGMODE=OFF
FAHT_SHORTONLY=OFF
FAHT_QUICKMODE=OFF
FAHT_MEMTEST=ON
FAHT_CLAMAV=ON
FAHT_WIN_PART=
FAHT_PUPS=
FAHT_PUPS_RESULTS=
FAHT_CLAMSCAN_RESULTS=
TESTONLY=OFF

source io.sh
source hw_tests.sh
source softscan_fns.sh
source sequence_fns.sh
source parsing_fns.sh
source reboot_fns.sh

config_file_build

while getopts ":hdsqctomxr" option; do
	case $option in
		h) clear ; echo "usage: fahtdiag [-h] help [-d] diagmode [-s] shorttest [-q] quickmode [-c] clamav scan [-t] testmode [-x] destroy test files [-o] only "TEST"..."; exit ;;
		d) FAHT_DIAGMODE=ON ;;
		s) FAHT_SHORTONLY=ON ;;
		q) FAHT_QUICKMODE=ON ;;
		c) FAHT_CLAMAV=ON ;;
		t) TESTONLY=ON ;;
		o) ONETEST=$OPTARG ;;
		m) MEMTEST=OFF ;;
		x) DESTROY=ON ;;
		r) REFRESH=ON ;;
		?) echo "error: option -$OPTARG is not implemented"; exit;;
	esac
done

shift $(( OPTIND - 1))

echo $FAHT_DIAGMODE

if [[ "${DESTROY}" == "ON" ]]; then
	rm $FAHT_STAGE_FILE
	rm -Rfv /mnt/usbdata/faht-tests/*
	rm /home/$(whoami)/.fahtdiag/custom_cmd.sh
	break_program
fi

if [[ "${REFRESH}" == "ON" ]]; then
	rm $FAHT_STAGE_FILE
	rm /home/$(whoami)/.fahtdiag/custom_cmd.sh
	break_program
fi


clear
echo -e "---------------------------"
echo -e "TechTutor's Diag Script"
echo -e "--------------------------- \n"

### Init vars
FAHT_CURR_USER=$(head -n 1 /tmp/fahtdiaguser)
FAHT_FIRSTNAME=
FAHT_LASTNAME=
FAHT_FULLNAME=
CONFIRM=n
FAHT_AUDIO=
FAHT_AUDIO_RESULTS="n/a"
FAHT_TEST_DATE=$(date +%Y-%m-%d)
FAHT_TEST_TIME=$(date +%Hh)
PAUSE=pause_input
FAHT_NOTES=
FAHT_PHYSICAL_GRADE=
FAHT_PHYSICAL_NOTES=
FAHT_COMPUTER_TYPE=
FAHT_ASSESSMENT_RESULTS=
FAHT_NOTES=
FAHT_PROBLEMS=
FAHT_TIMEON_THRESHOLD=26280
FAHT_GFX_STRESS_TETS_RESULTS="n/a"
FAHT_BLUETOOTH_RESULTS="n/a"
FAHT_PORTS_RESULTS="n/a"
FAHT_GFX_STRESS_TEST="n/a"
FAHT_GFX_STRESS_TEST_RESULTS="n/a"
FAHT_PROC_STRESS_TEST="n/a"
FAHT_PROC_STRESS_TEST_RESULTS="n/a"
FAHT_DISPLAY_TEST_RESULTS="n/a"
FAHT_DISPLAY_TEST=""
FAHT_POWER_RESULTS="n/a"
FAHT_ASSESSMENT_RESULTS=""

declare -A FAHT_FORM_ARRAY=( [FAHT_FULLNAME]="" [FAHT_PROBLEMS]="" [FAHT_NOTES]="" [FAHT_PHYSICAL_NOTES]="" [FAHT_COMPUTER_TYPE]="" [FAHT_ASSESSMENT_RESULTS]="" [FAHT_NOTES]="" )

if [ "$FAHT_DIAGMODE" == "ON" ]; then
	clear
	set -x
	echo DIAG MODE ACTIVATED!!!!!!!!
	DIAG=break_program;
fi

check_stagefile

if [ ! "$FAHT_CURR_STAGE" ]; then

	### Get basic system id for faht folder ###

	sudo lshw -c system>/tmp/fs.txt

	FAHT_COMP_TYPE="$(cat /tmp/fs.txt|grep description|sed 's/.*description: //'|sed -n 's/ *//gp')"
	FAHT_COMP_VENDOR="$(cat /tmp/fs.txt|grep vendor|head -1|sed 's/.*vendor: //')"
	FAHT_COMP_SN="$(cat /tmp/fs.txt|grep serial|sed 's/.*serial: //')"
	FAHT_COMP_DESC="$FAHT_COMP_VENDOR-$FAHT_COMP_TYPE-$FAHT_COMPUTER_SN"
	FAHT_COMP_VERSION="$(cat /tmp/fs.txt|grep version|sed 's/.*version: //')"
	$DIAG

	: echo BEGINING ALL THE THINGS...
	$DIAG

	init_dialog
	$DIAG
	client_details

	init_stagefile

	set_stage init
	FAHT_NEXT_STAGE=sysinfo_dump
	save_vars
fi

FAHT_FULLNAME="$FAHT_FIRSTNAME $FAHT_LASTNAME"

sysinfo_dump ()
{
	### Dump systeminfo ###
	echo -e "-----------------------------------"
	echo -e "Dumping system info. Please wait..."
	echo -e "-----------------------------------\n"
	echo

	sudo modprobe eeprom
	for i in system memory disk bus multimedia power display processor bridge volume network; do
		sudo lshw -c "$i" >"$FAHT_WORKINGDIR"/lshw-"$i".txt;
	done

	for i in bios system baseboard chassis processor memory cache connector slot; do
		sudo dmidecode -t $i >"$FAHT_WORKINGDIR"/dmidecode-$i.txt;
	done

	sudo lscpu>"$FAHT_WORKINGDIR"/lscpu.txt

	### Not sure if we'll ever use this since it just grabs a whole bunch of info from (mostly) commands that we will run, but dumping it for potentially future use...

    ### temp	hardinfo -r -f text>"$FAHT_WORKINGDIR"/hardinfo.txt

	### Grab summary info for summary sheet ###cd /

	FAHT_COMPUTER_DESC="$(cat "$FAHT_WORKINGDIR"/lshw-system.txt|grep product|head -n 1|sed -r 's/.*product: (.*) \(.*/\1/')"
	FAHT_COMPUTER_DESC="$(echo $FAHT_COMPUTER_DESC)"
	FAHT_PROC_MODEL="$(cat "$FAHT_WORKINGDIR"/lshw-processor.txt|grep product|sed 's/.*product: //')"
	FAHT_SOCKET_COUNT="$(cat "$FAHT_WORKINGDIR"/lscpu.txt|grep -i "Socket(s):"|sed 's/[^0-9]*//g')"
	FAHT_CORE_COUNT="$(( $(cat "$FAHT_WORKINGDIR"/lscpu.txt|egrep -i -m 1 ".*core.*socket*"|sed 's/[^0-9]*//g') * $FAHT_SOCKET_COUNT ))"
	FAHT_PROC_CORES="$(( $FAHT_CORE_COUNT * FAHT_SOCKET_COUNT ))"
	if [[ "${FAHT_PROC_CORES}" -le "2" ]]; then
		FAHT_PROC_CORES_RESULTS="FAILED"
	fi
	if [[ "${FAHT_PROC_CORES}" -ge "2" ]]; then
		FAHT_PROC_CORES_RESULTS="PASSED"
	fi
	FAHT_MEM_CONFIG="n/a"
	FAHT_MEM_TEST="n/a"
	FAHT_MEM_TEST_RESULTS="n/a"
	FAHT_CORE_THREAD="$(cat "$FAHT_WORKINGDIR"/lscpu.txt|egrep -i -m 1 ".*Thread.*core*"|sed 's/[^0-9]*//g')"
	FAHT_MAX_MEMORY="$(cat "$FAHT_WORKINGDIR"/dmidecode-memory.txt|grep -i -m 1 "Maximum Capacity:"|sed 's/[^0-9]*//g')"
	FAHT_MEM_SIZE="$(cat "$FAHT_WORKINGDIR"/lshw-memory.txt |sed -n '/*-memory/,/*-bank/p'|grep size|sed -r 's/.*size: ([0-9]+).*/\1/g')"

	if [[ "${FAHT_MEM_SIZE}" -le "4" ]]; then
		FAHT_MEM_SIZE_RESULTS="FAILED"
	fi
	if [[ "${FAHT_MEM_SIZE}" -ge "8" ]]; then
		FAHT_MEM_SIZE_RESULTS="PASSED"
	fi
	if [ "${FAHT_MEM_SIZE}" -ge "6" ] && [ "${FAHT_MEM_SIZE}" -lt "8" ]; then
		FAHT_MEM_SIZE_RESULTS="WARNING"
	fi

	FAHT_MEM_SIZE="${FAHT_MEM_SIZE} GB"

	FAHT_MEM_TYPE="$(cat "$FAHT_WORKINGDIR"/dmidecode-memory.txt|grep DDR|head -1|sed -r 's/.*(DDR[1-6]).*/\1/')"
	###FIXME: Cheating on fixing the whitespace for now...
	FAHT_MEM_TYPE="$(echo $FAHT_MEM_TYPE)"
	FAHT_MEM_SPEED="$(cat "$FAHT_WORKINGDIR"/dmidecode-memory.txt|grep "Configured Clock Speed:"|tail -1|sed -r 's/.* ([0-9]*) .*/\1/')"

	### FIXME: Would like to get config (e.g. 2 x 2GB DDR3 Samsung Modules 1600Mhz)
	#FAHT_MEM_CONFIG=
	#while [ j -le "$(cat $FAHT_WORKINGDIR/lshw-memory|grep bank|sed 's/[^0-9]*//'|tail -1)" ]; do
	#
	#done

	FAHT_PROC_THREADS="$(( $FAHT_CORE_COUNT * $FAHT_CORE_THREAD ))"
	if [[ "${FAHT_PROC_THREADS}" -le "2" ]]; then
		FAHT_PROC_THREADS_RESULTS="FAILED"
	fi
	if [[ "${FAHT_PROC_THREADS}" -ge "2" ]]; then
		FAHT_PROC_THREADS_RESULTS="PASSED"
	fi
	FAHT_CPU_MODEL="$(cat /proc/cpuinfo|grep -i -m 1 "model name"|sed -r 's/model name.*: (.*)/\1/g'|sed -n 's/  */ /gp')"
	FAHT_PROC_SPEED_MHZ="$(cat $FAHT_WORKINGDIR/dmidecode-processor.txt|grep "Current Speed"|tail -1|sed 's/[^0-9*]//g')"
	if [[ "${FAHT_PROC_SPEED_MHZ}" -lt "1600" ]]; then
		FAHT_PROC_SPEED_RESULTS="FAILED"
	fi
	if [[ "${FAHT_PROC_SPEED_MHZ}" -ge "1600" ]]; then
		FAHT_PROC_SPEED_RESULTS="PASSED"
	fi

	FAHT_PROC_SPEED="$(echo "scale=2;$FAHT_PROC_SPEED_MHZ/1000"|bc)"

	sudo acpi -i>"$FAHT_WORKINGDIR"/acpi.txt

	FAHT_BATT_DESIGN_CAPACITY="$(cat "$FAHT_WORKINGDIR"/acpi.txt|tail -1|sed -r 's/.*design capacity ([0-9]*).*/\1/') mAh"
	FAHT_BATT_CURR_CAPACITY="$(cat "$FAHT_WORKINGDIR"/acpi.txt|tail -1|sed -r 's/.*full capacity ([0-9]*).*/\1/') mAh"
	FAHT_BATT_HEALTH_RAW="$(cat "$FAHT_WORKINGDIR"/acpi.txt|tail -1|sed -r 's/.*= ([0-9]*).*/\1/')"
	
	if [[ "$FAHT_BATT_HEALTH_RAW" -ge "70" ]]; then
		FAHT_BATT_HEALTH_RESULTS="PASSED"
	else
		FAHT_BATT_HEALTH_RESULTS="FAILED"
	fi
	FAHT_BATT_HEALTH="${FAHT_BATT_HEALTH_RAW} %"

	if [ "$(cat "$FAHT_WORKINGDIR"/acpi.txt)" == "" ]; then
		FAHT_BATT_HEALTH_RESULTS="n/a"
		FAHT_BATT_DESIGN_CAPACITY="n/a"
		FAHT_BATT_CURR_CAPACITY="n/a"
		FAHT_BATT_HEALTH="n/a"
	fi

	### Note block device where linux is currently mounted for using as an exception when listing hdds
	FAHT_LIVE_DEV="$(sudo mount|grep " on / "|sed -n 's/^\/dev\/\(.*\)[0-9] on \/ .*/\1/gp')"
	j=1

	FAHT_INFODUMP=done
}

#source parsing_fns.sh

#if [ "$FAHT_INFODUMP" != "done" ]; then
#	sysinfo_dump
#	save_vars
#	$DIAG
#	FAHT_NEXT_STAGE=disks
#	FAHT_DISK_TESTS=incomplete
#fi
if [ -z "${FAHT_DISK_TESTS+x}" ]; then FAHT_DISK_TESTS=incomplete; fi 
run_stage sysinfo_dump init_memtest

#save_vars

: echo "Rebooting to test memory..."
run_stage init_memtest finish_memtest

: echo "Finsihing memory test..."
run_stage finish_memtest disk_array_setup

echo sourcing disk_fns.sh
source disks_fns.sh

if [ "$FAHT_TOTAL_TEST_DISKS" -ge 1 ]; then

	run_stage disk_array_setup mount_avail_volumes

	echo "Mounting available volumes..."
	run_stage mount_avail_volumes find_win_part

	echo "Searching for Windows system volumes..."
	run_stage find_win_part smart_test
	save_vars
	echo

	echo "Running SMART Assessments..."
	run_stage smart_test virus_scan
	echo
	
	echo "Scanning filesystems..."
	run_stage virus_scan benchmark_disks
	echo

	echo "Benchmarking disks..."	
	run_stage benchmark_disks list_disks_info
	echo

	run_stage list_disks_info proc_test
else
	: echo "Testing processor..."
	run_stage proc_test eth_test
fi
	: echo "Testing processor..."
	run_stage proc_test eth_test

	: echo "Testing network..."
	run_stage eth_test wifi_test

	: echo "Testing Wi-Fi connection..."
	run_stage wifi_test audio_test

	: echo "Testing Audio..."
	run_stage audio_test gfx_test

	: echo "Testing GFX..."
	run_stage gfx_test power_prompt

	echo !!! Almost done !!!
	confirm_prompt "Did you notice any power issues during the test?"

	case $prompt_answer in
		y|Y) FAHT_POWER_RESULTS=FAILED ;;
		n|N) FAHT_POWER_RESULTS=PASSED ;;
	esac
	save_vars
	FAHT_NEXT_STAGE=results

if [ "$FAHT_NEXT_STAGE" == "results" ]; then
	source parsing_fns.sh
	set_stage results
	results_prep
	results_check

	echo -e "All Done!\n"
	echo
	echo Opening faht-report.fodt
	soffice "${FAHT_WORKINGDIR}/faht-report.fodt"

	mkdir "${FAHT_WORKINGDIR}"/logfiles
	mv "${FAHT_WORKINGDIR}"/*.txt "${FAHT_WORKINGDIR}"/logfiles/
	
	mv "${FAHT_STAGE_FILE}" ${FAHT_WORKINGDIR}/logfiles/

	FAHT_NEXT_STAGE=complete
	set_stage complete

	if [[ $TESTONLY != "ON" ]]; then
		rsync -arvuP /mnt/usbdata/faht-tests/* techtutors@192.168.1.51:/home/PublicShare/FAHT-Reports/
		ssh tt1.local chown -Rfv techtutors:ttdata /home/PublicShare/FAHT-Reports/
	fi

	if [[ -f "/home/$(whoami)/.fahtdiag/" ]]; then
		rm /home/$(whoami)/.fahtdiag/custom_cmd.sh
	fi

fi
